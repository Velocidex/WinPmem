7. Feb 2022

* Fixes in KernelGetModuleBaseByPtr: on successfull return the buffer is not freed. This is a memory leak, but happens only one time (1).
Second, added a buffer check in KernelGetModuleBaseByPtr (2), and third, removed an unneeded checking in the for loop (3), which PREfast marked as nonsense check.
Impact:
For (1), the allocated memory loss is a one-time loss.
For (2), the added check is only of importance for clean code conduct. An allocation of such a size is always successfull unless the OS is dying, in which case we are screwed no matter what we do. 
For (3), checking a field of char[256] in the middle of a flat buffer only wastes time and makes no sense.

* Memory leak fix in kernelmode winpmem.c line 118: `if (number_of_runs > NUMBER_OF_RUNS) return STATUS_INFO_LENGTH_MISMATCH;` 
The memory allocated from `MmPhysicalMemoryRange = MmGetPhysicalMemoryRanges();` is not freed in this error branch.
Impact: some memory of varying size will be lost as often as the user launches a memory read ioctl. 

* Recommendation 1: Collecting ntoskrnl base address and the KPCR info is historical artefact data and not used anymore. We should remove it for the sake of clean code and simplicity. Especially the KPCR info code causes various compability issues.

* Recommendation 2: both methods MmMapToIoSpace and Device\\PhysicalMemory usage are deprecated. The second could be kept for 32 bit OS users, but the first one is a candidate for removal?


============

6. Oct 2020

New features & major revision (see below).

Changes:

* FAST I/O read. (Who needs IRPs when there is FAST I/O? ;-))

* Fixed errors occurring with x86.

* Unlimited read size support!
  Ever felt you should be able to read a 100 MB in a single read request?
  Or even a Gigabyte, at once? (If malloc allows that?)
  Well, read from memory with unlimited size now!
  
* FAST. Winpmem.exe took 15 seconds to read a whole 8 GB RAM.

* Safer than the old buffered version. 
  The old buffered version allowed to basically kill the system 
  by specifying a too large read sizes. (E.g., starting with 100 MB +)
  No more: read from Winpmem like from a normal filesystem driver!
  
* winpmem.exe now features a provisoric cute icon.

* Current usermode part rewritten to issue "large" (16 MB) reads (faster).
  Formerly it was reading in tiny 4096 byte units.

* CTL codes and struct data shared between driver and usermode is kept in 'userspace_interface'.
  1. To know which data is shared across kernelspace and userspace, and there is only one place now. 
  2. It cannot happen that one side changes shared data and the other does not get updated. 
  
* Cleaned code, code refactoring, removed antique files. 

* Removed 'fcat.exe' (netcat), which was causing Antivirus to go wild.
  (Probably due to its long history of having been used as malware intel tool.)
  It would be better to rewrite this using a clean-room approach.
  AVs going wild is very cumbersome, to say the least.
  
* Removed the elf coredump option as it was causing issues. 
  It could be taken in again, if needed, but would probably 
  require some maintenance.

* Updated documentation still mentioning rekall.

* Updated author info (not changing the copyright).

